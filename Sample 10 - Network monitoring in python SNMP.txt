#pip install psutil scapy pysnmp




######### Monitoring Multiple Interfaces and Packet Capture
import psutil
import time
from scapy.all import sniff

def monitor_network_stats():
    while True:
        net_io_counters = psutil.net_io_counters(pernic=True)
        for interface, counters in net_io_counters.items():
            print(f"Interface: {interface}")
            print(f"Bytes Sent: {counters.bytes_sent}")
            print(f"Bytes Received: {counters.bytes_recv}")
            print(f"Packets Sent: {counters.packets_sent}")
            print(f"Packets Received: {counters.packets_recv}")
            print("-------")
        time.sleep(5)

def packet_capture(interface):
    sniff(iface=interface, prn=lambda x: x.summary(), store=0)

if __name__ == "__main__":
    interfaces = psutil.net_if_addrs().keys()
    for iface in interfaces:
        print(f"Monitoring interface: {iface}")
        packet_capture(iface)
    
    monitor_network_stats()



#################################

#SNMP for Routers and Switches

from pysnmp.hlapi import *

def query_snmp(host, community, oid):
    iterator = getCmd(
        SnmpEngine(),
        CommunityData(community),
        UdpTransportTarget((host, 161)),
        ContextData(),
        ObjectType(ObjectIdentity(oid))
    )

    errorIndication, errorStatus, errorIndex, varBinds = next(iterator)

    if errorIndication:
        print(errorIndication)
    elif errorStatus:
        print('%s at %s' % (
            errorStatus.prettyPrint(),
            errorIndex and varBinds[int(errorIndex) - 1][0] or '?'
        ))
    else:
        for varBind in varBinds:
            print(' = '.join([x.prettyPrint() for x in varBind]))

if __name__ == "__main__":
    host = "192.168.1.1"  # replace with your router/switch IP
    community = "public"  # replace with your SNMP community string
    oid = "1.3.6.1.2.1.1.3.0"  # replace with your OID

    query_snmp(host, community, oid)
#############################

# Remote Monitoring //server 
import socket

def start_server(host="0.0.0.0", port=8080):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(5)
    print(f"Server listening on {host}:{port}")

    while True:
        client_socket, addr = server_socket.accept()
        print(f"Connection from {addr}")
        handle_client(client_socket)

def handle_client(client_socket):
    with client_socket:
        while True:
            data = client_socket.recv(1024)
            if not data:
                break
            print(f"Received: {data.decode()}")

if __name__ == "__main__":
    start_server()


////client 
import socket
import psutil
import time

def monitor_and_send(server_addr, port=8080):
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((server_addr, port))

    while True:
        net_io_counters = psutil.net_io_counters(pernic=True)
        for interface, counters in net_io_counters.items():
            message = (f"Interface: {interface}, Bytes Sent: {counters.bytes_sent}, "
                       f"Bytes Received: {counters.bytes_recv}\n")
            client_socket.sendall(message.encode())
        time.sleep(5)

if __name__ == "__main__":
    server_addr = "192.168.1.100"  # replace with your server address
    monitor_and_send(server_addr)

########################
